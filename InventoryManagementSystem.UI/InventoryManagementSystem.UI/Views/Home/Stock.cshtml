@{
    Layout = null;
}
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Stock Maintenance</title>
    <link rel="stylesheet" href="~/css/styles.css"> <!-- Optional for styling -->
    <script src="~/js/stock.js"></script>
    <style>
        /* Basic styles */
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f4f4f4;
            color: #333;
        }

        .container {
            max-width: 1200px;
            margin: 20px auto;
            padding: 20px;
            background-color: #fff;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            border-radius: 5px;
        }

        h1 {
            text-align: center;
            margin-bottom: 20px;
        }

        /* Controls section */
        .controls {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }

            .controls input[type="text"],
            .controls select {
                padding: 8px;
                margin-right: 10px;
                border: 1px solid #ccc;
                border-radius: 4px;
                font-size: 14px;
            }

            .controls button {
                padding: 10px 20px;
                background-color: #007bff;
                color: #fff;
                border: none;
                border-radius: 4px;
                cursor: pointer;
            }

                .controls button:hover {
                    background-color: #0056b3;
                }

        /* Table styles */
        table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 20px;
        }

            table th, table td {
                padding: 10px;
                text-align: left;
                border-bottom: 1px solid #ddd;
            }

            table th {
                background-color: #007bff;
                color: #fff;
                cursor: pointer;
            }

            table tr:hover {
                background-color: #f1f1f1;
            }

            table tr:nth-child(even) {
                background-color: #f9f9f9;
            }

        .actions button {
            padding: 5px 10px;
            background-color: #28a745;
            color: #fff;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            margin-right: 5px;
        }

            .actions button:hover {
                background-color: #218838;
            }

            .actions button:nth-child(2) {
                background-color: #dc3545;
            }

                .actions button:nth-child(2):hover {
                    background-color: #c82333;
                }

        /* Modal styles */
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0, 0, 0, 0.5);
            justify-content: center;
            align-items: center;
        }

        .modal-content {
            background-color: #fff;
            padding: 20px;
            border-radius: 5px;
            width: 400px;
            text-align: center;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
        }

            .modal-content h2 {
                margin-bottom: 20px;
            }

            .modal-content input[type="text"],
            .modal-content input[type="number"],
            .modal-content select {
                width: 100%;
                padding: 10px;
                margin-bottom: 10px;
                border: 1px solid #ccc;
                border-radius: 4px;
                font-size: 14px;
            }

            .modal-content button {
                padding: 10px 20px;
                background-color: #007bff;
                color: #fff;
                border: none;
                border-radius: 4px;
                cursor: pointer;
            }

                .modal-content button:hover {
                    background-color: #0056b3;
                }

        /* Close button */
        .close {
            position: absolute;
            top: 10px;
            right: 15px;
            font-size: 20px;
            cursor: pointer;
            color: #333;
        }

            .close:hover {
                color: #000;
            }

    </style>
</head>

<body>
    <div class="container">
        <h1>Stock Maintenance</h1>

        <div class="controls">
            <input type="text" id="searchBar" placeholder="Search Stock..." onkeyup="filterStock()">
            <select id="filterCategory" onchange="filterStock()">
                <option value="">All Categories</option>
                <option value="electronics">Electronics</option>
                <option value="furniture">Furniture</option>
                <option value="clothing">Clothing</option>
            </select>
            <button onclick="showAddStockModal()">Add New Stock</button>
        </div>

        <table id="stockTable">
            <thead>
                <tr>
                    <th onclick="sortTable(0)">Item Name</th>
                    <th onclick="sortTable(1)">Category</th>
                    <th onclick="sortTable(2)">Quantity</th>
                    <th onclick="sortTable(3)">Price</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody id="stockTableBody">
                <!-- Stock items will be dynamically inserted here -->
            </tbody>
        </table>
    </div>

    <!-- Modal for adding/editing stock -->
    <div id="addStockModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeAddStockModal()">&times;</span>
            <h2 id="modalTitle">Add New Stock</h2>
            <input type="text" id="newItemName" placeholder="Item Name">
            <select id="newCategory">
                <option value="electronics">Electronics</option>
                <option value="furniture">Furniture</option>
                <option value="clothing">Clothing</option>
            </select>
            <input type="number" id="newQuantity" placeholder="Quantity" min="1">
            <input type="number" id="newPrice" placeholder="Price" min="0.01" step="0.01">
            <button onclick="saveStock()">Save Stock</button>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            loadStockItems();
        });

        let stockItems = [];
        let editIndex = -1;

        function loadStockItems() {
            debugger;
            fetch('https://localhost:7137/api/Stock/GetStockItems')
                .then(response => response.json())
                .then(data => {
                    stockItems = data;
                    displayStockItems(stockItems);
                })
                .catch(error => console.error('Error:', error));
        }

        function displayStockItems(items) {
            debugger;
            const tbody = document.getElementById('stockTableBody');
            tbody.innerHTML = '';

            items.forEach(item => {
                const row = `<tr>
                                        <td>${item.itemName}</td>
                                        <td>${item.category}</td>
                                        <td>${item.quantity}</td>
                                        <td>$${item.price.toFixed(2)}</td>
                                        <td class="actions">
                                            <button onclick="editStock(${item.id})">Edit</button>
                                            <button onclick="deleteStock(${item.id})">Delete</button>
                                        </td>
                                    </tr>`;
                tbody.innerHTML += row;
            });
        }

        function saveStock() {
            debugger;
            const stockItem = {
                id: editIndex !== -1 ? stockItems[editIndex].id : 0, // Use the correct id if editing
                itemName: document.getElementById('newItemName').value,
                category: document.getElementById('newCategory').value,
                quantity: parseInt(document.getElementById('newQuantity').value, 10),
                price: parseFloat(document.getElementById('newPrice').value)
            };

            const url = editIndex === -1 ? 'https://localhost:7137/api/Stock/AddStockItem' : `https://localhost:7137/api/Stock/EditStockItem/${stockItem.id}`;
            const method = editIndex === -1 ? 'POST' : 'PUT';

            fetch(url, {
                method: method,
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(stockItem)
            })
                .then(response => response.json())
                .then(() => {
                    loadStockItems();
                    closeAddStockModal();
                })
                .catch(error => console.error('Error:', error));
        }

        function showAddStockModal() {
            document.getElementById('modalTitle').innerText = 'Add New Stock';
            document.getElementById('newItemName').value = '';
            document.getElementById('newCategory').value = 'electronics';
            document.getElementById('newQuantity').value = '';
            document.getElementById('newPrice').value = '';
            editIndex = -1;
            document.getElementById('addStockModal').style.display = 'flex';
        }

        function closeAddStockModal() {
            document.getElementById('addStockModal').style.display = 'none';
        }

        function editStock(id) {
            const item = stockItems.find(i => i.id === id);
            if (item) {
                document.getElementById('modalTitle').innerText = 'Edit Stock';
                document.getElementById('newItemName').value = item.itemName;
                document.getElementById('newCategory').value = item.category;
                document.getElementById('newQuantity').value = item.quantity;
                document.getElementById('newPrice').value = item.price;
                editIndex = stockItems.indexOf(item);
                document.getElementById('addStockModal').style.display = 'flex';
            }
        }

        function deleteStock(id) {
            debugger;
            if (confirm('Are you sure you want to delete this item?')) {
                fetch(`https://localhost:7137/api/Stock/DeleteStockItem/${id}`, {
                    method: 'DELETE'
                })
                    .then(() => loadStockItems())
                    .catch(error => console.error('Error:', error));
            }
        }

        function filterStock() {
            const searchValue = document.getElementById('searchBar').value.toLowerCase();
            const filterCategory = document.getElementById('filterCategory').value;

            const filteredItems = stockItems.filter(item => {
                return (
                    item.itemName.toLowerCase().includes(searchValue) &&
                    (filterCategory === '' || item.category === filterCategory)
                );
            });
            displayStockItems(filteredItems);
        }

        function sortTable(n) {
            const table = document.getElementById('stockTable');
            const rows = Array.from(table.querySelectorAll('tbody tr'));
            const isAscending = table.querySelector(`thead th:nth-child(${n + 1})`).classList.toggle('asc');

            rows.sort((rowA, rowB) => {
                const cellA = rowA.children[n].textContent.trim();
                const cellB = rowB.children[n].textContent.trim();

                if (n === 3) { // Sort price column numerically
                    return isAscending
                        ? parseFloat(cellA.slice(1)) - parseFloat(cellB.slice(1))
                        : parseFloat(cellB.slice(1)) - parseFloat(cellA.slice(1));
                }

                return isAscending
                    ? cellA.localeCompare(cellB)
                    : cellB.localeCompare(cellA);
            });

            table.querySelector('tbody').append(...rows);
        }
    </script>
</body>

</html>
